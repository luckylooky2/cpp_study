// 3.7 이진수

// 10진법
// 0(10^0 * 0)
// 1(10^0 * 1)
// ..
// 10(10^1 * 1 + 10^0 * 0)
// 11(10^1 * 1 + 10^0 * 1)
// ...
// 337(10^2 * 3 + 10^1 * 3 + 10^0 * 7)

// 2진법
// 0(2^0 * 0)
// 1(2^0 * 1)
// 10(2^1 * 1 + 2^0 *0)
// 11(2^1 * 1 + 2^0 *1)

// 메모리에 저장할 때는 이진수로 바꿔서 저장
// 보여줄 때는 이진수를 다른 진수로 바꿔서 보여줌

// 10진법 => 2진법(양수)
// 0101 1110 (1 byte)
// 2^7 * 0 + 2^6 * 1 + 2^5 * 0 + 2^4 * 1 + 2^3 * 1 + 2^2 * 1 + 2^1 * 1 + 2^0 * 0 = 94

// 2진법 => 10진법(양수)
// 1. 2로 계속 나눈 나머지를 기록 => 거꾸로 세기
// 2. 2의 배수 중 해당 숫자보다 큰 수를 선택 => n + 1 번째 자리 1 => 해당 숫자에서 2의 배수를 뺌 => 뺀 수 보다 다음 2의 배수가 작으면 1, 크면 0 => 반복

// 10진법 => 2진법(음수)
// 절대값의 이진수로 나타냄 => 비트 전환 => + 1
// 양의 정수로서의 0 == 음의 정수로서의 0

// 2진법 => 10진법(음수)
// 비트 전환 => + 1 => 부호 비트가 1이면 음수화

// signed vs. unsigned
// signed : 1001 1110 => 0110 0001 => 0110 0010 => 98 => -98
// unsigned : 1001 1110 => 바로 계산 => 158

// 연습 문제
// 0100 1101 => (s10)
// 93 => (u2)
// -93 => (s2)
// 1010 0010 => (u10)
// 1010 0010 => (s10)